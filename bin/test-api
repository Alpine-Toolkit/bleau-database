#! /usr/bin/env python3

####################################################################################################
#
# Bleau Database - A database of the bouldering area of Fontainebleau
# Copyright (C) 2015 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import argparse

from BleauDataBase.BleauDataBase import BleauDataBase

####################################################################################################

parser = argparse.ArgumentParser(description='Importer')

parser.add_argument('json_file', metavar='json_file',
                    help='JSON file')

args = parser.parse_args()

####################################################################################################

bleau_database = BleauDataBase(json_file=args.json_file)

# massif = bleau_database['91_1']
# for place in massif.nearest_point_deau():
#     print(place.nom, massif.distance_to(place))
# print(massif.cotations)
# for circuit in massif:
#     print(circuit.cotation)

from BleauDataBase.Statistics import CircuitStatistics
circuit_statistics = CircuitStatistics(bleau_database.circuits)

# for grade_counter in circuit_statistics.circuit_grade_histogram:
#     print(str(grade_counter), grade_counter.count)

# for grade_counter in circuit_statistics.boulder_grade_histogram:
#     print(str(grade_counter), grade_counter.count)

from bokeh.plotting import figure
from bokeh.embed import components
from bokeh._legacy_charts import Bar, output_file, show

grade_counters = circuit_statistics.boulder_grade_histogram.domain()
y_data = [grade_counter.count for grade_counter in grade_counters]
x_data = [str(grade_counter) for grade_counter in grade_counters]

plot = figure()
bar = Bar(y_data, x_data, title='Grade', stacked=True)

# output_file("stacked_bar.html")
# show(bar)

script, div = components(bar)
print(script)
print(div)

####################################################################################################
#
# End
#
####################################################################################################
